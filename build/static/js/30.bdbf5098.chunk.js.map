{"version":3,"sources":["views/datalog/BootNotification.js"],"names":["StatusNotification","props","fields1","key","_classes","isMobile","useCookies","cookies","configHeader","headers","Authorization","TocToken","useState","GV","vendorTablepagesize","fields","items","setItems","loading","setLoading","page","setPage","pages","setPages","itemsPerPage","setItemsPerPage","columnFilterValue","tableFilterValue","setTableFilterValue","sorterValue","setSorterValue","last_id","status","pagesize","lastid","fetchTrigger","setFetchTrigger","params","JSON","stringify","query","URLSearchParams","toString","useEffect","axios","post","process","then","result","data","docs","totalPages","catch","err","UTIL","setTimeout","id","className","style","width","position","float","marginTop","block","color","onClick","hover","tableFilter","external","onTableFilterChange","sorter","onSorterValueChange","itemsPerPageSelect","onPaginationChange","scopedSlots","item","pid","cpId","chargePointModel","chargePointVendor","chargePointSerialNumber","firmwareVersion","localtime","activePage","onActivePageChange"],"mappings":"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","file":"static/js/30.bdbf5098.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { CBadge, CCard, CButton, CCardHeader, CCol, CDataTable, CRow, CPagination } from '@coreui/react'\r\nimport $ from 'jquery';\r\nimport axios from 'axios';\r\nimport * as UTIL from 'src/util/Fnc'\r\nimport { useCookies } from 'react-cookie';\r\nimport GV from '../../globalSet'\r\nimport { isMobile } from 'react-device-detect';\r\nimport { cibOpenstreetmap } from '@coreui/icons';\r\n\r\nconst defaultValue = [{ _id: \"\", username: \"\", userId: \"\", phone: \"\", email: \"\", grade: \"\", status: 1, password: \"\" }];\r\nconst StatusNotification = (props) => {\r\n\r\n  // 페이지내 글로벌 변수 정의  START:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\r\n  var fields1 = [{ key: '통신코드', _classes: 'Tablefirst' }, { key: '충전기아이디', _classes: 'Tablefirst' }, { key: '충전기모델명', _classes: 'Tablefirst' }, { key: '충전기시리얼번호', _classes: 'Tablefirst' }, { key: '로그기록일', _classes: 'Tablefirst' }]\r\n  if (isMobile) { fields1 = [{ key: '통신코드', _classes: 'Tablefirst' }, { key: '충전기아이디', _classes: 'Tablefirst' }, { key: '충전기시리얼번호', _classes: 'Tablefirst' }] }\r\n  var fields2 = [{ key: '통신코드', _classes: 'Tablefirst' }, { key: '충전기아이디', _classes: 'Tablefirst' }, { key: '충전기모델명', _classes: 'Tablefirst' }, { key: '충전기시리얼번호', _classes: 'Tablefirst' }, { key: '로그기록일', _classes: 'Tablefirst' }]\r\n  if (isMobile) { fields2 = [{ key: '통신코드', _classes: 'Tablefirst' }, { key: '충전기아이디', _classes: 'Tablefirst' }, { key: '충전기시리얼번호', _classes: 'Tablefirst' }] }\r\n  const [cookies] = useCookies(['token']);  //Auth    \r\n  const configHeader = { headers: { Authorization: `Bearer ${cookies.TocToken}` } } // axios 전송을 위한 헤더값 세팅\r\n  const [pagesize, setPageSize] = useState(GV.vendorTablepagesize);\r\n  const [fields, setFields] = useState(fields1)\r\n\r\n  // 페이지내 글로벌 변수 정의  END :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\r\n  const [data, setData] = useState([]);\r\n  // 라이브 페이징을 위한 정의  START\r\n  const [items, setItems] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [page, setPage] = useState(1);\r\n  const [pages, setPages] = useState(5);\r\n  const [itemsPerPage, setItemsPerPage] = useState(5);\r\n  const [columnFilterValue, setColumnFilterValue] = useState();\r\n  const [tableFilterValue, setTableFilterValue] = useState(\"\");\r\n  const [sorterValue, setSorterValue] = useState();\r\n  const [last_id, setlast_id] = useState(\"\");    // 페이징 쿼리를 위해 가장 마지막 _id값 세팅\r\n  const [senddata, setSenddata] = useState({ status: 1, pagesize: itemsPerPage, lastid: last_id });\r\n\r\n  const [fetchTrigger, setFetchTrigger] = useState(0);\r\n\r\n  const params = {\r\n    page,\r\n    columnFilterValue: JSON.stringify(columnFilterValue),\r\n    tableFilterValue,\r\n    sorterValue: JSON.stringify(sorterValue),\r\n    itemsPerPage\r\n  };\r\n  // 라이브 페이징을 위한 정의  END\r\n  const query = new URLSearchParams(params).toString();\r\n\r\n  useEffect(() => {\r\n\r\n    // 리스트 출력 기본 세팅값 정의 \r\n    axios.post(process.env.REACT_APP_APISERVER + \"/api/data/bootnoti\", params, configHeader).then(result => {\r\n      setItems(result.data.data.docs);\r\n      setPages(result.data.data.totalPages);\r\n      setLoading(false);\r\n    }).catch(err => {\r\n\r\n      UTIL.api401chk(err);\r\n      setTimeout(() => {\r\n        setFetchTrigger(fetchTrigger + 1);\r\n      }, 5000);\r\n    });\r\n  }, [query, fetchTrigger]);\r\n\r\n  function refresh() {\r\n    // window.location='/get/logview';\r\n\r\n    // 리스트 출력 기본 세팅값 정의 \r\n    axios.post(process.env.REACT_APP_APISERVER + \"/api/data/bootnoti\", params, configHeader).then(result => {\r\n      setItems(result.data.data.docs);\r\n      setPages(result.data.data.totalPages);\r\n      setLoading(false);\r\n    }).catch(err => {\r\n\r\n      UTIL.api401chk(err);\r\n      setTimeout(() => {\r\n        setFetchTrigger(fetchTrigger + 1);\r\n      }, 5000);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CRow>\r\n        <CCol>\r\n          <CRow>\r\n\r\n            <CCard id=\"listtable2\" className=\"p-5\" style={{ width: \"100%\", position: \"relative\", float: \"left\" }}>\r\n              <div style={{ marginTop: \"-40px\" }}>\r\n                <CButton block color=\"info\" onClick={refresh}>새로고침</CButton>\r\n              </div>\r\n              <CDataTable\r\n                items={items}\r\n                fields={fields}\r\n                loading={loading}\r\n                hover\r\n\r\n                // columnFilter={{ external: true }}\r\n                // columnFilterValue={columnFilterValue}\r\n                // onColumnFilterChange={setColumnFilterValue}\r\n                tableFilter={{ external: true }}\r\n                tableFilterValue={tableFilterValue}\r\n                onTableFilterChange={setTableFilterValue}\r\n                sorter\r\n                sorterValue={sorterValue}\r\n                onSorterValueChange={setSorterValue}\r\n                itemsPerPageSelect={{ external: true }}\r\n                itemsPerPage={itemsPerPage}\r\n                onPaginationChange={setItemsPerPage}\r\n                scopedSlots={{\r\n\r\n                  '통신코드': (item) => (<td style={{ width: \"20%\" }}>{item.pid}</td>),\r\n                  '충전기아이디': (item) => (<td style={{ width: \"20%\" }} >{item.cpId}</td>),\r\n                  '충전기모델명': (item) => (<td style={{ width: \"20%\" }}>모델명 : {item.chargePointModel}<br />벤더사 : {item.chargePointVendor}</td>),\r\n                  '충전기시리얼번호': (item) => (<td style={{ width: \"20%\" }}>시리얼넘버 : {item.chargePointSerialNumber}<br />펌웨어버전 : {item.firmwareVersion}</td>),\r\n                  '로그기록일': (item) => (<td style={{ width: \"30%\" }}>{item.localtime}</td>),\r\n                }}\r\n              />\r\n              <CPagination\r\n                pages={pages}\r\n                activePage={page}\r\n                onActivePageChange={setPage}\r\n                className={pages < 2 ? \"d-none\" : \"\"}\r\n              />\r\n            </CCard>\r\n\r\n\r\n          </CRow>\r\n\r\n        </CCol>\r\n      </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StatusNotification"],"sourceRoot":""}