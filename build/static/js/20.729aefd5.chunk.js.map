{"version":3,"sources":["views/pages/register/Register.js","views/modals/Modals.js"],"names":["Register","useState","mode","msg","color","warning","setModal","username","setUsername","userid","setUserid","email","setEmail","pwd","setPwd","useCookies","cookies","idchek","TocToken","a","axios","post","process","userId","then","user","data","alert","params","company_id","csId","password","grade","permission","phone","status","handleClick","window","location","UTIL","catch","err","className","fnc","md","lg","xl","name","type","value","onChange","target","placeholder","autoComplete","onClick","Modals","props","setWarning","ermsg","setErmsg","useEffect","show","onClose","closeButton","id","style","textAlign","paddingTop","paddingBottom","dangerouslySetInnerHTML","__html","delClick"],"mappings":"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","file":"static/js/20.729aefd5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CRow\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport axios from 'axios'\r\nimport cookie, { useCookies } from 'react-cookie'\r\nimport * as UTIL from '../../../util/Fnc'\r\nimport MODAL from '../../modals/Modals'\r\nimport CryptoJS from \"crypto-js\"\r\n\r\n\r\nconst Register = () => {\r\n  const [warning, setModal] = useState({ mode: false, msg: \"\", color: \"info\" });\r\n  const [username, setUsername] = useState(\"\");\r\n  const [userid, setUserid] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [pwd, setPwd] = useState(\"\");\r\n  const [cookies] = useCookies(['token']);  //Auth  \r\n  const configHeader = { headers: { Authorization: `Bearer ${cookies.TocToken}` } } // axios 전송을 위한 헤더값 세팅\r\n\r\n\r\n\r\n\r\n\r\n  var sum = 0;\r\n  var name = username;\r\n  var pass = pwd;\r\n\r\n\r\n  // 아이디 중복환인\r\n  const idchek = async () => {\r\n    await axios.post(process.env.REACT_APP_APISERVER + \"/api/auth/idchek/\", { userId: userid }).then(user => {\r\n      if (user.data.data === null) {\r\n        alert(\"사용 가능한 아이디\")\r\n        sum = 1;\r\n      } else {\r\n        alert(\"이미 존재하는 아이디\")\r\n        sum = 2;\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  const params = {\r\n    company_id: \"PMGROW\",\r\n    csId: \"1500\",\r\n    userId: userid,\r\n    password: pwd,\r\n    grade: \"1\",\r\n    permission: \"1234\",\r\n    username: username,\r\n    email: email,\r\n    phone: \"010-4614-9846\",\r\n    status: 1\r\n\r\n  };\r\n\r\n  // 회원가입\r\n  const handleClick = async () => {\r\n    // if(sum === 2 || sum === 0){\r\n    //   alert(\"아이디 중복확인을 해주세요\")\r\n    //   return false;\r\n    // }\r\n    // if(name === null){\r\n    //   alert(\"이름을 입력해주세요\")\r\n    //   return false;\r\n    // }\r\n\r\n    // if(pass === null){\r\n    //   alert(\"비밀번호를 입력해주세요\")\r\n    //   return false;\r\n    // }\r\n\r\n    await axios.post(process.env.REACT_APP_APISERVER + \"/api/auth/register/\", params).then(function (user) {\r\n      if (user) {\r\n        alert(\"회원가입 완료!\")\r\n        window.location = \"/login\"\r\n      } else {\r\n        setModal(UTIL.modalopen('입력한 정보가 정확하지 않습니다', 'danger'))\r\n      }\r\n    }).catch(function (err) {\r\n      //console.log(err)\r\n      setModal(UTIL.modalopen('정보를 입력해주세요'))\r\n\r\n    })\r\n  }\r\n\r\n  const closemodal = () => {\r\n    setModal(false);\r\n  }\r\n  return (\r\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\r\n      <MODAL data={warning} fnc={closemodal}></MODAL>\r\n      <CContainer>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol md=\"9\" lg=\"7\" xl=\"6\">\r\n            <CCard className=\"mx-4\">\r\n              <CCardBody className=\"p-4\">\r\n                <CForm>\r\n                  <h1>Register</h1>\r\n                  <p className=\"text-muted\">Create your account</p>\r\n                  <CInputGroup className=\"mb-3\">\r\n                    <CInputGroupPrepend>\r\n                      <CInputGroupText>\r\n                        <CIcon name=\"cil-user\" />\r\n                      </CInputGroupText>\r\n                    </CInputGroupPrepend>\r\n                    <CInput type=\"text\" value={userid} onChange={({ target: { value } }) => setUserid(value)} placeholder=\"Userid\" autoComplete=\"userid\" />\r\n                    <CButton color=\"success\" onClick={idchek}>아이디 중복 확인</CButton>\r\n                  </CInputGroup>\r\n\r\n                  <CInputGroup className=\"mb-3\">\r\n                    <CInputGroupPrepend>\r\n                      <CInputGroupText>\r\n                        <CIcon name=\"cil-user\" />\r\n                      </CInputGroupText>\r\n                    </CInputGroupPrepend>\r\n                    <CInput type=\"text\" value={username} onChange={({ target: { value } }) => setUsername(value)} placeholder=\"Username\" autoComplete=\"username\" />\r\n                  </CInputGroup>\r\n\r\n                  <CInputGroup className=\"mb-3\">\r\n                    <CInputGroupPrepend>\r\n                      <CInputGroupText>@</CInputGroupText>\r\n                    </CInputGroupPrepend>\r\n                    <CInput type=\"text\" value={email} onChange={({ target: { value } }) => setEmail(value)} placeholder=\"Email\" autoComplete=\"email\" />\r\n                  </CInputGroup>\r\n\r\n                  <CInputGroup className=\"mb-3\">\r\n                    <CInputGroupPrepend>\r\n                      <CInputGroupText>\r\n                        <CIcon name=\"cil-lock-locked\" />\r\n                      </CInputGroupText>\r\n                    </CInputGroupPrepend>\r\n                    <CInput type=\"password\" value={pwd} onChange={({ target: { value } }) => setPwd(value)} placeholder=\"Password\" autoComplete=\"new-password\" />\r\n                  </CInputGroup>\r\n\r\n                  <CInputGroup className=\"mb-4\">\r\n                    <CInputGroupPrepend>\r\n                      <CInputGroupText>\r\n                        <CIcon name=\"cil-lock-locked\" />\r\n                      </CInputGroupText>\r\n                    </CInputGroupPrepend>\r\n                    <CInput type=\"password\" placeholder=\"Repeat password\" autoComplete=\"new-password\" />\r\n                  </CInputGroup>\r\n\r\n\r\n                  <CButton color=\"success\" onClick={handleClick}>Create Account</CButton>\r\n                </CForm>\r\n              </CCardBody>\r\n            </CCard>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Register\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow\r\n} from '@coreui/react'\r\n\r\n\r\nconst Modals = (props) => {\r\n\r\n  const [modal, setModal] = useState(true)\r\n  const [large, setLarge] = useState(false)\r\n  const [small, setSmall] = useState(false)\r\n  const [primary, setPrimary] = useState(false)\r\n  const [success, setSuccess] = useState(false)\r\n  const [warning, setWarning] = useState(false)\r\n  const [danger, setDanger] = useState(false)\r\n  const [info, setInfo] = useState(false)\r\n  const [ermsg, setErmsg] = useState(\"Error !!\")\r\n  useEffect(() => {\r\n    if (props.data.mode === true) {\r\n      setWarning(!warning);\r\n    } else {\r\n      setWarning(warning);\r\n    }\r\n    setErmsg(\"<div style='padding-top:20px;'><span>\" + props.data.msg + \"</span></div>\")\r\n  }, [props]);\r\n\r\n  const setClose = () => {\r\n    props.fnc(false);\r\n    setWarning(!warning);\r\n  }\r\n\r\n  return (\r\n    <CModal\r\n      show={warning}\r\n      onClose={() => setWarning(!warning)}\r\n      color={props.data.color}\r\n    >\r\n      <CModalHeader closeButton>\r\n        <CModalTitle>TOC System POPUP</CModalTitle>\r\n      </CModalHeader>\r\n      <CModalBody id=\"txtmsg\" style={{ textAlign: 'center', paddingTop: \"30px\", paddingBottom: \"30px\" }} dangerouslySetInnerHTML={{ __html: ermsg }}>\r\n      </CModalBody>\r\n      <CModalFooter>\r\n        {props.mode === \"save\" && <CButton id=\"btn_modal_save\" color=\"warning\" onClick={() => props.handleClick()}>저장</CButton>}\r\n        {props.mode === \"del\" && <CButton id=\"btn_modal_del\" color=\"warning\" onClick={() => props.delClick()}>삭제</CButton>}\r\n        <CButton color=\"secondary\" onClick={() => setClose()}>닫기</CButton>\r\n      </CModalFooter>\r\n    </CModal>\r\n\r\n  )\r\n}\r\n\r\nexport default Modals"],"sourceRoot":""}