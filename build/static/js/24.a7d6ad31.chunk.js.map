{"version":3,"sources":["views/contents/LogView.js"],"names":["Logininfo","props","fields1","key","_classes","isMobile","useCookies","cookies","configHeader","headers","Authorization","TocToken","useState","fields","items","setItems","loading","setLoading","page","setPage","pages","setPages","itemsPerPage","setItemsPerPage","columnFilterValue","tableFilterValue","setTableFilterValue","sorterValue","setSorterValue","fetchTrigger","setFetchTrigger","params","JSON","stringify","query","URLSearchParams","toString","useEffect","axios","post","process","then","result","data","docs","totalPages","catch","err","UTIL","setTimeout","id","className","style","width","position","float","marginTop","block","color","onClick","hover","tableFilter","external","onTableFilterChange","sorter","onSorterValueChange","itemsPerPageSelect","onPaginationChange","scopedSlots","item","log","doctype","createdAt","listStyle","padding","fontSize","inputdata","returndata","activePage","onActivePageChange"],"mappings":"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","file":"static/js/24.a7d6ad31.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { CBadge, CCard, CButton, CCol, CDataTable, CRow, CPagination } from '@coreui/react'\r\nimport axios from 'axios';\r\nimport * as UTIL from 'src/util/Fnc'\r\nimport { useCookies } from 'react-cookie';\r\nimport { isMobile } from 'react-device-detect';\r\n\r\nconst Logininfo = (props) => {\r\n\r\n  // 페이지내 글로벌 변수 정의  START:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\r\n  var fields1 = [{ key: 'TYPE', _classes: 'Tablefirst' }, { key: '로그기록일', _classes: 'Tablefirst' }, { key: '메시지', _classes: 'Tablefirst' }]\r\n  if (isMobile) { fields1 = [{ key: 'TYPE', _classes: 'Tablefirst' }, { key: '로그기록일', _classes: 'Tablefirst' }, { key: '메시지', _classes: 'Tablefirst' }] }\r\n  var fields2 = [{ key: 'TYPE', _classes: 'Tablefirst' }, { key: '로그기록일', _classes: 'Tablefirst' }, { key: '메시지', _classes: 'Tablefirst' }]\r\n  if (isMobile) { fields2 = [{ key: 'TYPE', _classes: 'Tablefirst' }, { key: '로그기록일', _classes: 'Tablefirst' }, { key: '메시지', _classes: 'Tablefirst' }] }\r\n  const [cookies] = useCookies(['token']);  //Auth    \r\n  const configHeader = { headers: { Authorization: `Bearer ${cookies.TocToken}` } } // axios 전송을 위한 헤더값 세팅\r\n  const [fields, setFields] = useState(fields1)\r\n\r\n  // 페이지내 글로벌 변수 정의  END :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\r\n  const [data, setData] = useState([]);\r\n  // 라이브 페이징을 위한 정의  START\r\n  const [items, setItems] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [page, setPage] = useState(1);\r\n  const [pages, setPages] = useState(5);\r\n  const [itemsPerPage, setItemsPerPage] = useState(5);\r\n  const [columnFilterValue, setColumnFilterValue] = useState();\r\n  const [tableFilterValue, setTableFilterValue] = useState(\"\");\r\n  const [sorterValue, setSorterValue] = useState();\r\n\r\n  const [fetchTrigger, setFetchTrigger] = useState(0);\r\n\r\n  const params = {\r\n    page,\r\n    columnFilterValue: JSON.stringify(columnFilterValue),\r\n    tableFilterValue,\r\n    sorterValue: JSON.stringify(sorterValue),\r\n    itemsPerPage\r\n  };\r\n  // 라이브 페이징을 위한 정의  END\r\n  const query = new URLSearchParams(params).toString();\r\n\r\n  useEffect(() => {\r\n\r\n    // 리스트 출력 기본 세팅값 정의 \r\n    axios.post(process.env.REACT_APP_APISERVER + \"/api/pages_report/socketloglist\", params, configHeader).then(result => {\r\n      setItems(result.data.data.docs);\r\n      setPages(result.data.data.totalPages);\r\n      setLoading(false);\r\n    }).catch(err => {\r\n\r\n      UTIL.api401chk(err);\r\n      setTimeout(() => {\r\n        setFetchTrigger(fetchTrigger + 1);\r\n      }, 5000);\r\n    });\r\n  }, [query, fetchTrigger]);\r\n\r\n  function refresh() {\r\n    // window.location='/get/logview';\r\n\r\n    // 리스트 출력 기본 세팅값 정의 \r\n    axios.post(process.env.REACT_APP_APISERVER + \"/api/pages_report/socketloglist\", params, configHeader).then(result => {\r\n      setItems(result.data.data.docs);\r\n      setPages(result.data.data.totalPages);\r\n      setLoading(false);\r\n    }).catch(err => {\r\n\r\n      UTIL.api401chk(err);\r\n      setTimeout(() => {\r\n        setFetchTrigger(fetchTrigger + 1);\r\n      }, 5000);\r\n    });\r\n  }\r\n  return (\r\n    <>\r\n      <CRow>\r\n        <CCol>\r\n          <CRow>\r\n\r\n            <CCard id=\"listtable2\" className=\"p-5\" style={{ width: \"100%\", position: \"relative\", float: \"left\" }}>\r\n              <div style={{ marginTop: \"-40px\" }}>\r\n                <CButton block color=\"info\" onClick={refresh}>새로고침</CButton>\r\n              </div>\r\n              <CDataTable\r\n                items={items}\r\n                fields={fields}\r\n                loading={loading}\r\n                hover\r\n\r\n                // columnFilter={{ external: true }}\r\n                // columnFilterValue={columnFilterValue}\r\n                // onColumnFilterChange={setColumnFilterValue}\r\n                tableFilter={{ external: true }}\r\n                tableFilterValue={tableFilterValue}\r\n                onTableFilterChange={setTableFilterValue}\r\n                sorter\r\n                sorterValue={sorterValue}\r\n                onSorterValueChange={setSorterValue}\r\n                itemsPerPageSelect={{ external: true }}\r\n                itemsPerPage={itemsPerPage}\r\n                onPaginationChange={setItemsPerPage}\r\n                scopedSlots={{\r\n                  'TYPE':\r\n                    (item) => (\r\n                      <td >\r\n                        {item.log.doctype}\r\n                      </td>\r\n                    ),\r\n                  '로그기록일':\r\n                    (item) => (\r\n                      <td>{item.createdAt + 9}</td>\r\n                    )\r\n                  ,\r\n                  '메시지':\r\n                    (item) => (\r\n                      <td>\r\n                        <ul style={{ listStyle: \"none\" }}>\r\n                          <li>\r\n                            <CBadge className=\"mr-1\" color=\"primary\" style={{ padding: \"5px\", fontSize: \"13px\" }}>입력데이터</CBadge>\r\n                            {item.log.inputdata}\r\n                          </li>\r\n                          <li>\r\n                            <CBadge className=\"mr-1\" color=\"secondary\" style={{ padding: \"5px\", fontSize: \"13px\" }}>출력데이터</CBadge>\r\n                            {item.log.returndata}\r\n                          </li>\r\n                        </ul>\r\n\r\n                      </td>\r\n                    )\r\n                }}\r\n              />\r\n              <CPagination\r\n                pages={pages}\r\n                activePage={page}\r\n                onActivePageChange={setPage}\r\n                className={pages < 2 ? \"d-none\" : \"\"}\r\n              />\r\n            </CCard>\r\n\r\n\r\n\r\n\r\n          </CRow>\r\n\r\n        </CCol>\r\n      </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Logininfo"],"sourceRoot":""}